##############################################################################
# Build global options
# NOTE: Can be overridden externally.
#

# Compiler options here.
ifeq ($(USE_OPT),)
  USE_OPT = -O2 -ggdb -fomit-frame-pointer -falign-functions=16 --specs=nosys.specs -lm
endif

# C specific options here (added to USE_OPT).
ifeq ($(USE_COPT),)
  USE_COPT = 
endif

# C++ specific options here (added to USE_OPT).
ifeq ($(USE_CPPOPT),)
  USE_CPPOPT = -fno-rtti -fno-exceptions -std=c++11
endif

# Enable this if you want the linker to remove unused code and data
ifeq ($(USE_LINK_GC),)
  USE_LINK_GC = yes
endif

# Linker extra options here.
ifeq ($(USE_LDOPT),)
  USE_LDOPT =
endif

# Enable this if you want link time optimizations (LTO)
ifeq ($(USE_LTO),)
  USE_LTO = no
endif

# If enabled, this option allows to compile the application in THUMB mode.
ifeq ($(USE_THUMB),)
  USE_THUMB = yes
endif

# Enable this if you want to see the full log while compiling.
ifeq ($(USE_VERBOSE_COMPILE),)
  USE_VERBOSE_COMPILE = no
endif

#
# Build global options
##############################################################################

##############################################################################
# Architecture or project specific options
#

# Enables the use of FPU on Cortex-M4 (no, softfp, hard).
ifeq ($(USE_FPU),)
  USE_FPU = hard
endif

# Enable this if you really want to use the STM FWLib.
ifeq ($(USE_FWLIB),)
  USE_FWLIB = yes
endif

#
# Architecture or project specific options
##############################################################################

##############################################################################
# Project, sources and paths
#

# Define project name here
PROJECT = firmware

# Imported source files and paths
CHIBIOS = ../third_party/chibios
COMMON = ../common
include $(COMMON)/common.mk

NANOPB = ../third_party/nanopb
PROTO_DIR = proto
GEN_DIR = ${BUILDDIR}/gen
PB_GEN_DIR = ${GEN_DIR}/proto
include $(NANOPB)/extra/nanopb.mk

PB_GEN = ${PB_GEN_DIR}/messages.pb.c ${PB_GEN_DIR}/messages.pb.h
# The rules to generate object files from the generated source files
# This could be merge with another rule from your Makefile
PB_GEN_SRC := $(filter %.c,$(PB_GEN))
PB_GEN_OBJ := $(patsubst %.c,%.o,$(PB_GEN_SRC))

# Define linker script file here
LDSCRIPT = link.ld

SRC = src
INCLUDE = include

COMMON_SRC = $(COMMON)/src
COMMON_INCLUDE = $(COMMON)/include
BOARDSRC = $(COMMON)/board.c
BOARDINC = $(COMMON)

# C sources that can be compiled in ARM or THUMB mode depending on the global
# setting.
CSRC = $(PORTSRC) \
       $(KERNSRC) \
       $(TESTSRC) \
       $(HALSRC) \
       $(PLATFORMSRC) \
       $(BOARDSRC) \
	   $(NANOPB_CORE) \
       $(CHIBIOS)/os/various/chprintf.c \
       $(CHIBIOS)/os/various/memstreams.c \
       $(COMMON_SRC)/utils.c \
       $(COMMON_SRC)/flash.c \
       $(COMMON_SRC)/helper.c \
       $(COMMON_SRC)/crc16.c \
       $(SRC)/crc_mlx.c

# C++ sources that can be compiled in ARM or THUMB mode depending on the global
# setting.
CPPSRC = $(COMMON_SRC)/comms.cpp \
         $(COMMON_SRC)/constants.cpp \
         $(SRC)/main.cpp \
         $(SRC)/peripherals.cpp \
         $(SRC)/DRV8312.cpp \
         $(SRC)/AS5047D.cpp \
         $(SRC)/state.cpp \
         $(SRC)/control.cpp \
         $(SRC)/LUTFunction.cpp \
         $(SRC)/fast_math.cpp \
         $(SRC)/transforms.cpp \
         $(SRC)/fw_comms.cpp \
         $(SRC)/SVM.cpp \
         $(SRC)/pid.cpp \
         $(SRC)/MCP9808.cpp \
         $(SRC)/IIS328DQ.cpp \
         $(SRC)/Recorder.cpp

# C sources to be compiled in ARM mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
ACSRC =

# C++ sources to be compiled in ARM mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
ACPPSRC =

# C sources to be compiled in THUMB mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
TCSRC =

# C sources to be compiled in THUMB mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
TCPPSRC =

# List ASM source files here
ASMSRC = $(PORTASM)

INCDIR = $(PORTINC) $(KERNINC) $(TESTINC) \
         $(HALINC) $(PLATFORMINC) $(BOARDINC) \
         $(CHIBIOS)/os/various \
		 $(NANOPB_DIR) \
         $(COMMON_INCLUDE) \
         $(INCLUDE)

# Dir for proto messages.
INCDIR += ${GEN_DIR}
CSRC += ${PB_GEN_DIR}/messages.pb.c

#
# Project, sources and paths
##############################################################################

##############################################################################
# Compiler settings
#

MCU  = cortex-m4

#TRGT = arm-elf-
TRGT = arm-none-eabi-
CC   = $(TRGT)gcc
CPPC = $(TRGT)g++
# Enable loading with g++ only if you need C++ runtime support.
# NOTE: You can use C++ even without C++ support if you are careful. C++
#       runtime support makes code size explode.
# LD   = $(TRGT)gcc
LD   = $(TRGT)g++
CP   = $(TRGT)objcopy
AS   = $(TRGT)gcc -x assembler-with-cpp
OD   = $(TRGT)objdump
SZ   = $(TRGT)size
HEX  = $(CP) -O ihex
BIN  = $(CP) -O binary

# ARM-specific options here
AOPT =

# THUMB-specific options here
TOPT = -mthumb -DTHUMB

# Define C warning options here
CWARN = -Wall -Wextra -Wstrict-prototypes

# Define C++ warning options here
CPPWARN = -Wall -Wextra

#
# Compiler settings
##############################################################################

##############################################################################
# Start of default section
#

# List all default C defines here, like -D_DEBUG=1
DDEFS =

# List all default ASM defines here, like -D_DEBUG=1
DADEFS =

# List all default directories to look for include files here
DINCDIR =

# List the default directory to look for the libraries here
DLIBDIR =

# List all default libraries here
DLIBS =

#
# End of default section
##############################################################################

##############################################################################
# Start of user section
#

# List all user C define here, like -D_DEBUG=1
UDEFS =

# Define ASM defines here
UADEFS =

# List all user directories here
UINCDIR =

# List the user directory to look for the libraries here
ULIBDIR =

# List all user libraries here
ULIBS =

#
# End of user defines
##############################################################################

ifeq ($(USE_FWLIB),yes)
  include $(CHIBIOS)/ext/stm32lib/stm32lib.mk
  CSRC += $(STM32SRC)
  INCDIR += $(STM32INC)
  USE_OPT += -DUSE_STDPERIPH_DRIVER
endif

RULESPATH = $(CHIBIOS)/os/ports/GCC/ARMCMx
include $(RULESPATH)/rules.mk

.PHONY: upload
.PHONY: uload_tty
.PHONY: debug

# Build rule for the protocol
${PB_GEN}: ${PROTO_DIR}/messages.proto
	mkdir -p ${PB_GEN_DIR}
	$(PROTOC) $(PROTOC_OPTS) -I$(NANOPB_DIR)/generator/proto \
		--nanopb_out=${PB_GEN_DIR} --proto_path=${PROTO_DIR} $<

$(PB_GEN_OBJ): $(PB_GEN_SRC)
	$(CXX) $(CXXFLAGS) -c $^ -o $@

upload: build/$(PROJECT).bin
	openocd -f openocd.cfg -c "\
		init;\
		reset halt;\
		flash probe 0;\
		flash write_image erase build/$(PROJECT).bin 0x08010000;\
		verify_image build/$(PROJECT).bin 0x08010000;\
		reset run;\
		shutdown"

debug: build/$(PROJECT).elf
	./run_gdb.sh

upload_tty:
	python3 -m bd_tools upload_firmware /dev/ttyUSB0 1 build/firmware.bin
