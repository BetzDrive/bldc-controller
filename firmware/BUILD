load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("//third_party:variables.bzl", "project_inc_paths")
load("//toolchains:platforms.bzl", "firmware_binary", "gen_binary")
load("//toolchains:os_config.bzl", "os_config")
load("//toolchains:flash.bzl", "flash_remote")
load(
    "@com_github_nanopb_nanopb//extra/bazel:nanopb_cc_proto_library.bzl",
    "cc_nanopb_proto_library",
)
load("@bazel_embedded//tools/openocd:defs.bzl", "openocd_flash")

firmware_binary(
    name = "firmware_raw",
    srcs = glob(["src/*.c"]) + glob(["src/*.cpp"]),
    copts = project_inc_paths,
    linkopts = [
        "-T $(location :link.ld)",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":link.ld",
        ":main_libs",
    ],
)

cc_nanopb_proto_library(
    name = "messages_nanopb",
    protos = ["//firmware/proto:messages_proto"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "main_libs",
    hdrs = glob(
        [
            "include/*.h",
            "include/*.hpp",
        ],
        exclude = [
            "include/stm32f4xx_conf.h",
            "include/chconf.h",
            "include/halconf.h",
            "include/mcuconf.h",
        ],
    ),
    copts = project_inc_paths,
    includes = ["include"],
    deps = [
        ":messages_nanopb",
        "//common",
        "@com_github_nanopb_nanopb//:nanopb",
    ],
    alwayslink = True,
)

filegroup(
    name = "peripheral_config",
    srcs = ["include/peripherals.hpp"],
    visibility = ["//visibility:public"],
)

os_config(
    name = "os_config",
    program = "firmware",
)

gen_binary(
    name = "firmware",
    src = ":firmware_raw",
)

flash_remote(
    name = "upload",
    image = ":firmware.bin",
    upload_type = "firmware",
)

openocd_flash(
    name = "flash",
    device_configs = [
        "target/stm32f4x.cfg",
    ],
    flash_offset = "0x8010000",
    image = ":firmware.bin",
    interface_configs = [
        "interface/stlink-v2.cfg",
    ],
)
